// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // or replace with "postgresql" for SQL databases
  url      = env("DATABASE_URL")
}

model Organization {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  employees      Employee[]
  contracts      Contract[]
  jobs           Job[]
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  reports        Report[]
  createdAt      DateTime
  updatedAt      DateTime
  subscriptionId String       @db.ObjectId
}

model Employee {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  surname        String
  picture        String
  email          String         @unique
  password       String // Hashed password
  role           Role
  status         EmployeeStatus
  error          String?
  jobs           EmployeeJob[] // Relation through EmployeeJob model
  reports        Report[]
  createdAt      DateTime
  updatedAt      DateTime
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?        @db.ObjectId
  contracts      Contract[]
}

model Contract {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  fileId         String
  signedBy       Employee?     @relation(fields: [signedById], references: [id])
  signedById     String?       @db.ObjectId
  createdAt      DateTime
  updatedAt      DateTime
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
}

model Job {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  location       String
  startDate      DateTime
  endDate        DateTime
  contractNumber String
  customerName   String
  employees      EmployeeJob[] // Relation through EmployeeJob model
  status         JobStatus // "not-started", "in-progress", "done"
  createdAt      DateTime
  updatedAt      DateTime
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
}

model Report {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  employee       Employee      @relation(fields: [employeeId], references: [id])
  employeeId     String        @db.ObjectId
  hoursWorked    Float
  paidAmount     Float
  bonus          Float
  createdAt      DateTime
  updatedAt      DateTime
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
}

// Join table for many-to-many relationship between Employee and Job
model EmployeeJob {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @db.ObjectId

  @@unique([employeeId, jobId]) // Ensure unique pairs of employee and job
}

model Subscription {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  organization Organization[]
}

enum Role {
  manager
  employee
}

enum EmployeeStatus {
  pending
  idle
  error
}

enum JobStatus {
  not_started
  in_progress
  done
}
